from typing import List 
from fastapi import Body
from pydantic import BaseModel
from infrastructure.automl.utils.base_state import TrainState
from infrastructure.automl.utils.automl_main import run_train_automl,run_predict_automl_from_list
import pandas as pd
import os 

class MLData(BaseModel):
        """
        Represents a container for machine learning data, handling loading, processing, and storage.
        
                 Class Attributes:
                 - data: The loaded dataset.
                 - case: Specifies whether the data represents a regression or classification task.
                 - data_path: Path to the dataset file.
                 - target_column: Name of the target variable column.
                 - smiles_list: List of SMILES strings if applicable to the dataset.
                 - timeout: Timeout value for data loading operations.
                 - feature_column: Name of the feature column.
                 - path_to_save: Path to save the processed data.
                 - description: A textual description of the dataset.
                 - regression_props: List of regression properties.
                 - classification_props: List of classification properties.
        """

        data:dict = None
        case:str = None
        data_path:str = None
        target_column:list = None
        smiles_list: list = None
        timeout:int = 30 #30 min
        feature_column:list = ['Smiles']
        path_to_save:str = 'automl/train_model_data/trained_data'
        description:str = 'Unknown case.'
        regression_props:list= None
        classification_props:list = None
        save_trained_data_to_sync_server:bool = False


def train_ml_with_data(data:MLData=Body()):
    """
    Trains a machine learning model using provided data.
    
    This method prepares data for model training by saving it to a CSV file and 
    configuring the training environment with details like data location, 
    feature columns, and target columns. It then initiates the AutoML training process. 
    This allows the system to learn from specific datasets provided by the user.
    
    Args:
        data (MLData): The input data containing case details, data (as a pandas DataFrame), 
                       feature columns, target columns, and prediction properties.
    
    Returns:
        None
    """
        state = TrainState()
        state.add_new_case(case_name=data.case,
                           rewrite=True,
                           description=data.description)
        if data.data is not None:
                df = pd.DataFrame(data.data)
                data.data_path = f"automl/data/{data.case}"
                if not os.path.isdir(data.data_path):
                    os.mkdir(data.data_path)
                data.data_path = data.data_path + '/data.csv'
                df = df.dropna()
                df = df[df[data.feature_column[0]].str.len()<200]
                df.to_csv(data.data_path) 
                      
        state.ml_model_upd_data(case=data.case,
                                data_path=data.data_path,
                                feature_column=data.feature_column,
                                target_column=data.target_column,
                                 predictable_properties={"regression":data.regression_props, "classification":data.classification_props})
        run_train_automl(case=data.case,
                         path_to_save=data.path_to_save,
                         timeout=data.timeout,
                         save_trained_data_to_sync_server=data.save_trained_data_to_sync_server)

def inference_ml(data:MLData=Body()):
    """
    Runs a prediction using an automated machine learning model.
    
    Args:
        data: An MLData object containing the case identifier and a list of SMILES strings representing chemical structures.
    
    Returns:
        The prediction results generated by the AutoML model, based on the provided chemical structures and case.
    """
        resutls = run_predict_automl_from_list(data.case,data=data.smiles_list)
        return resutls